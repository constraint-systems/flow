{"version":3,"file":"static/webpack/static/development/pages/index.js.5b13dec701ef8de26952.hot-update.js","sources":["webpack:///./pages/index.js"],"sourcesContent":["import React, { useState, useEffect, useRef, useCallback } from 'react';\nimport { flowMove } from '../components/flows';\nimport Head from 'next/head';\n\nlet cursor_padding = 10;\nlet magenta = 'rgba(255,0,255,1)';\nlet green = 'rgba(0,255,0,1)';\nlet fs = 14;\nlet lh = 1.5;\n\nconst Home = () => {\n  let cref = useRef(null);\n  let sref = useRef(null);\n  let uref = useRef(null);\n  let keymap = useRef({});\n  let readref = useRef(null);\n  let cursorref = useRef([0, 0, 20, 20]);\n  let waterref = useRef([400, 0, 20, 1024]);\n  let counter = useRef(0);\n  let handlerref = useRef(null);\n  let moder = useRef('move');\n  let flow_mark = useRef(null);\n  let flows = useRef([]);\n  let flows_visible = useRef(false);\n\n  function initImageCanvas(img) {\n    let c = cref.current;\n    c.width = img.width;\n    c.height = img.height;\n    let ctx = c.getContext('2d');\n    ctx.drawImage(img, 0, 0, c.width, c.height);\n  }\n\n  function initScanCanvas(img) {\n    let c = sref.current;\n    c.width = img.width + cursor_padding * 2;\n    c.height = img.height + cursor_padding * 2;\n    let ctx = c.getContext('2d');\n  }\n\n  function initImage(src, first_load = false) {\n    let w = window.innerWidth - cursor_padding * 2;\n    let h = window.innerHeight - cursor_padding * 2 - 10 - fs * lh;\n\n    let img = new Image();\n    img.onload = () => {\n      let iw = img.width;\n      let ih = img.height;\n\n      let wa = w / h;\n      let ia = iw / ih;\n\n      let resize_check = false;\n      let rw, rh;\n      if (ia >= wa) {\n        if (iw > w) {\n          resize_check = true;\n          rw = w;\n          rh = w / ia;\n        }\n      } else {\n        if (ih > h) {\n          resize_check = true;\n          rh = h;\n          rw = h * ia;\n        }\n      }\n\n      if (resize_check) {\n        let confirm_check = true;\n        if (!first_load) {\n          confirm_check = confirm(\n            `The image you selected is larger (${iw}x${ih}) than the browser window.  Resize it to fit (${rw}x${rh})? Choose cancel to import it at full size.`\n          );\n        }\n        if (confirm_check) {\n          img.width = rw;\n          img.height = rh;\n        }\n      }\n\n      initImageCanvas(img);\n      initScanCanvas(img);\n      drawCursor();\n\n      runFlow();\n      setRead();\n    };\n    img.src = src;\n  }\n\n  function drawPossFlows() {\n    let im = cref.current;\n    let iw = im.offsetWidth;\n    let ih = im.offsetHeight;\n    let cursor = cursorref.current;\n    let west = [0, cursor[1], cursor[0], cursor[3]];\n    let east = [\n      cursor[0] + cursor[2],\n      cursor[1],\n      iw - (cursor[0] + cursor[2]),\n      cursor[3],\n    ];\n    let north = [cursor[0], 0, cursor[2], cursor[1]];\n    let south = [\n      cursor[0],\n      cursor[1] + cursor[3],\n      cursor[2],\n      ih - (cursor[1] + cursor[3]),\n    ];\n    let dirs = [west, east, north, south];\n    let padded_dirs = dirs.map(n =>\n      n.map((v, i) => (i === 0 || i === 1 ? v + cursor_padding : v))\n    );\n    let stx = sref.current.getContext('2d');\n    stx.fillStyle = 'rgba(0,0,0,0.2)';\n    stx.strokeStyle = 'rgba(0,0,0,0.8)';\n    for (let i = 0; i < padded_dirs.length; i++) {\n      let d = padded_dirs[i];\n      stx.fillRect(...d);\n      stx.strokeRect(...d);\n    }\n    stx.strokeStyle = 'white';\n  }\n\n  function toggleFlowVisibility() {\n    console.log('toggle it');\n    console.log(flows_visible.current);\n    flows_visible.current = !flows_visible.current;\n  }\n\n  function drawFlowOutlines() {\n    let stx = sref.current.getContext('2d');\n    stx.strokeStyle = '#aaa';\n    for (let f = 0; f < flows.current.length; f++) {\n      let flow = flows.current[f];\n      stx.strokeRect(\n        flow[0] + cursor_padding,\n        flow[1] + cursor_padding,\n        flow[2],\n        flow[3]\n      );\n    }\n  }\n\n  function drawCursor() {\n    let sm = sref.current;\n    let sw = sm.offsetWidth;\n    let sh = sm.offsetHeight;\n\n    let stx = sref.current.getContext('2d');\n    let mode = moder.current;\n    if (mode !== 'adjust_flow') {\n      let cursor = cursorref.current;\n      stx.strokeStyle = magenta;\n      stx.lineWidth = 1;\n      stx.strokeRect(\n        cursor[0] + cursor_padding,\n        cursor[1] + cursor_padding,\n        cursor[2],\n        cursor[3]\n      );\n\n      if (mode === 'adjust_cursor') {\n        stx.fillStyle = magenta;\n        stx.beginPath();\n        stx.arc(\n          cursor[0] + cursor_padding,\n          cursor[1] + cursor_padding,\n          4,\n          0,\n          2 * Math.PI\n        );\n        stx.fill();\n      }\n    }\n  }\n\n  function chooseFlow(dir) {\n    let im = cref.current;\n    let iw = im.offsetWidth;\n    let ih = im.offsetHeight;\n\n    moder.current = 'adjust_flow';\n    let cursor = cursorref.current;\n    if (dir === 'w') {\n      flow_mark.current = [0, cursor[1], cursor[0] + cursor[2], cursor[3], dir];\n    } else if (dir === 'e') {\n      flow_mark.current = [\n        cursor[0],\n        cursor[1],\n        iw - cursor[0],\n        cursor[3],\n        dir,\n      ];\n    } else if (dir === 'n') {\n      flow_mark.current = [cursor[0], 0, cursor[2], cursor[1] + cursor[3], dir];\n    } else if (dir === 's') {\n      flow_mark.current = [\n        cursor[0],\n        cursor[1],\n        cursor[2],\n        ih - cursor[1],\n        dir,\n      ];\n    }\n  }\n\n  function runFlow() {\n    let c = cref.current;\n    let ctx = c.getContext('2d');\n    let iw = c.offsetWidth;\n    let ih = c.offsetHeight;\n    for (let f = 0; f < flows.current.length; f++) {\n      let flow = flows.current[f];\n      let t = flowMove(flow, c);\n      ctx.drawImage(t, flow[0], flow[1], flow[2], flow[3]);\n    }\n    handlerref.current = requestAnimationFrame(runFlow);\n  }\n\n  function startFlow() {\n    flows.current.push(flow_mark.current);\n    moder.current = 'move';\n  }\n\n  function setRead() {\n    let im = cref.current;\n    let iw = im.offsetWidth;\n    let ih = im.offsetHeight;\n    let fm = flow_mark.current;\n\n    let cursor = cursorref.current;\n    let read = readref.current;\n    if (moder.current === 'adjust_flow') {\n      read.innerHTML = `${fm[0]},${fm[1]} ${fm[2]}x${\n        fm[3]\n      } ${fm[4].toUpperCase()}`;\n    } else {\n      read.innerHTML = `${iw}x${ih}  ${cursor[0]},${cursor[1]} ${cursor[2]}x${\n        cursor[3]\n      }`;\n    }\n  }\n\n  function keyAction(key, repeat) {\n    let im = cref.current;\n    let iw = im.offsetWidth;\n    let ih = im.offsetHeight;\n\n    let m = keymap.current;\n    let cursor = cursorref.current;\n    let mode = moder.current;\n\n    if (key === ' ') {\n      if (handlerref.current !== null) {\n        cancelAnimationFrame(handlerref.current);\n        handlerref.current = null;\n      } else {\n        runFlow();\n      }\n    }\n\n    if (key === 'v') {\n      toggleFlowVisibility();\n    }\n\n    if (moder.current === 'move') {\n      let inc = 1;\n      if (m['shift']) inc = 10;\n\n      if (m['j']) cursor[1] += inc;\n      if (m['k']) cursor[1] -= inc;\n      if (m['h']) cursor[0] -= inc;\n      if (m['l']) cursor[0] += inc;\n\n      if (cursor[0] < 0) cursor[0] = 0;\n      if (cursor[0] + cursor[2] > iw) cursor[0] = iw - cursor[2];\n      if (cursor[1] < 0) cursor[1] = 0;\n      if (cursor[1] + cursor[3] > ih) cursor[1] = ih - cursor[3];\n\n      if (key === '2') {\n        moder.current = 'adjust_cursor';\n      }\n      if (key === 'enter') {\n        moder.current = 'choose_flow';\n      }\n    } else if (moder.current === 'adjust_cursor') {\n      let inc = 1;\n      if (m['shift']) inc = 10;\n\n      if (m['j']) cursor[3] += inc;\n      if (m['k']) cursor[3] -= inc;\n      if (m['h']) cursor[2] -= inc;\n      if (m['l']) cursor[2] += inc;\n\n      if (cursor[0] + cursor[2] > iw) cursor[2] = iw - cursor[0];\n      if (cursor[1] + cursor[3] > ih) cursor[3] = ih - cursor[1];\n\n      if (key === 'enter') {\n        moder.current = 'move';\n      }\n      if (key === 'escape') {\n        moder.current = 'move';\n      }\n      if (key === '1') {\n        moder.current = 'move';\n      }\n    } else if (moder.current === 'choose_flow') {\n      if (key === 'a') {\n        chooseFlow('w');\n      } else if (key === 'w') {\n        chooseFlow('n');\n      } else if (key === 's') {\n        chooseFlow('s');\n      } else if (key === 'd') {\n        chooseFlow('e');\n      }\n      if (key === 'escape') {\n        moder.current = 'move';\n      }\n    } else if (moder.current === 'adjust_flow') {\n      let fm = flow_mark.current;\n      if (key === 'escape') {\n        moder.current = 'choose_flow';\n      } else if (key === 'enter') {\n        startFlow();\n      } else if (key === 'f') {\n        if (fm[4] === 'w') {\n          fm[4] = 'e';\n        } else if (fm[4] === 'e') {\n          fm[4] = 'w';\n        } else if (fm[4] === 'n') {\n          fm[4] = 's';\n        } else if (fm[4] === 's') {\n          fm[4] = 'n';\n        }\n      }\n    }\n    let sm = sref.current;\n    let sw = sm.offsetWidth;\n    let sh = sm.offsetHeight;\n    let stx = sref.current.getContext('2d');\n    stx.clearRect(0, 0, sw, sh);\n    if (flows_visible.current) {\n      drawFlowOutlines();\n    }\n    if (moder.current === 'choose_flow') {\n      drawPossFlows();\n    } else if (moder.current === 'adjust_flow') {\n      stx.strokeStyle = green;\n      let fm = flow_mark.current;\n      stx.strokeRect(\n        fm[0] + cursor_padding,\n        fm[1] + cursor_padding,\n        fm[2],\n        fm[3]\n      );\n      stx.fillStyle = green;\n      stx.beginPath();\n      let xa;\n      let ya;\n      if (fm[4] === 'e') {\n        xa = fm[0];\n        ya = fm[1] + fm[3] / 2;\n      } else if (fm[4] === 's') {\n        xa = fm[0] + fm[2] / 2;\n        ya = fm[1];\n      } else if (fm[4] === 'w') {\n        xa = fm[0] + fm[2];\n        ya = fm[1] + fm[3] / 2;\n      } else if (fm[4] === 'n') {\n        xa = fm[0] + fm[2] / 2;\n        ya = fm[1] + fm[3];\n      }\n      stx.arc(xa + cursor_padding, ya + cursor_padding, 4, 0, 2 * Math.PI);\n      stx.fill();\n    }\n    drawCursor();\n\n    setRead();\n  }\n\n  function downHandler(e) {\n    keymap.current[e.key.toLowerCase()] = true;\n    keyAction(e.key.toLowerCase(), e.repeat);\n  }\n\n  function upHandler(e) {\n    keymap.current[e.key.toLowerCase()] = false;\n  }\n\n  useEffect(() => {\n    window.addEventListener('keydown', downHandler);\n    window.addEventListener('keyup', upHandler);\n    return () => {\n      window.removeEventListener('keydown', downHandler);\n      window.removeEventListener('keyup', upHandler);\n      if (handlerref.current !== null) cancelAnimationFrame(handlerref.current);\n    };\n  }, []);\n\n  useEffect(() => {\n    // initImage('/heroes.jpg');\n    initImage('/yyy.jpg', true);\n    // initImage('/mestrip.png');\n    // initImage('/scruggs.jpg');\n    // initImage('/fka.jpg');\n    // initImage('/grant.png');\n  }, []);\n\n  return (\n    <div>\n      <Head>\n        <title>Waterfalls</title>\n        <link rel=\"icon\" href=\"/favicon.ico\" />\n      </Head>\n      <div style={{ position: 'relative', padding: cursor_padding }}>\n        <canvas ref={cref} />\n        <canvas\n          ref={sref}\n          style={{\n            position: 'absolute',\n            left: 0,\n            top: 0,\n            pointerEvents: 'none',\n          }}\n        />\n      </div>\n      <div\n        style={{\n          marginLeft: cursor_padding,\n          marginBottom: cursor_padding,\n          whiteSpace: 'pre-wrap',\n        }}\n        ref={readref}\n      />\n      <style global jsx>{`\n        @font-face {\n          font-family: 'custom';\n          src: url('/IBMPlexMono-Regular.woff2') format('woff2'),\n            url('/IBMPlexMono-Regular.woff') format('woff');\n        }\n        * {\n          box-sizing: border-box;\n        }\n        html {\n          font-family: custom, monospace;\n          font-size: ${fs}px;\n          line-height: ${lh};\n        }\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        canvas {\n          display: block;\n        }\n      `}</style>\n    </div>\n  );\n};\n\nexport default Home;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAMA;AACA;AAAA;AACA;AAAA;AADA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWA;AACA;AACA;AACA;AAHA;AAKA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAjBA;AAAA;AAAA;AAAA;AAiDA;AACA;AACA;;;;A","sourceRoot":""}